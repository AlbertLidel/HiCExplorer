language: python
sudo: true
services:
  - postgresql
addons:
  apt:
    packages:
    - samtools
python:
  - 2.7

os:
  - linux

jobs:
  include:
    - stage: lint
      env:
        - LINT=1
      before_install:
        - curl https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -o miniconda.sh
        - bash miniconda.sh -b -p $HOME/miniconda
        - PATH_WITHOUT_CONDA="$PATH"
        - export PATH="$HOME/miniconda/bin:$PATH"
        - hash -r
        - conda config --set always_yes yes --set changeps1 no
        - conda update -q conda
      install:
        - conda install --yes python=2.7 flake8
      script:
        - if [[ "$LINT" == "1" ]]; then flake8 . --exclude=.venv,.build,planemo_test_env,build --ignore=E501,F403,E402,F999,F405,E712 ; fi
    - stage: test
      # Setup anaconda
      before_install:
        - export HIC_TEST_DATA_DIR="`pwd`/hicexplorer/test/test_data/"
        - echo $HIC_TEST_DATA_DIR
        - curl https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -o miniconda.sh
        # - if [[ "$TRAVIS_OS_NAME" == "linux" && "$TRAVIS_PYTHON_VERSION" == "3.5" ]]; then curl https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -o miniconda.sh ; fi
        # - if [[ "$TRAVIS_OS_NAME" == "linux" && "$TRAVIS_PYTHON_VERSION" == "3.6" ]]; then curl https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -o miniconda.sh ; fi
        - bash miniconda.sh -b -p $HOME/miniconda
        - PATH_WITHOUT_CONDA="$PATH"
        - export PATH="$HOME/miniconda/bin:$PATH"
        - hash -r
        - conda config --set always_yes yes --set changeps1 no
        - conda update -q conda
        # Useful for debugging any issues with conda
        - conda info -a

      # Install packages
      install:
        - conda create --name hicexplorer_pytest --yes python=$TRAVIS_PYTHON_VERSION pytest
        - source activate hicexplorer_pytest
        - conda install --yes -c defaults -c conda-forge -c bioconda --file requirements.txt
        - conda install --yes -c defaults -c conda-forge -c bioconda configparser
        - python setup.py install

      # command to run tests
      script:
        - py.test hicexplorer --doctest-modules  

    - stage: planemo lint
      before_install:
        - if [[ -d "$HOME/.planemo" ]]; then rm -rf $HOME/.planemo ; fi
      install:
        - pip install planemo
      script:
        - planemo lint galaxy/wrapper
   
    # - stage: planemo galaxy wrapper no_dependency_resolution
    #   before_install:
    #     - if [[ -d "$HOME/.planemo" ]]; then rm -rf $HOME/.planemo; fi 
    #     - pip install planemo
    #     - curl https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -o miniconda.sh
    #     - bash miniconda.sh -b -p $HOME/miniconda
    #     - PATH_WITHOUT_CONDA="$PATH"
    #     - export PATH="$HOME/miniconda/bin:$PATH"
    #     - hash -r
    #     - conda config --set always_yes yes --set changeps1 no
    #     - conda update -q conda
    #   install:
    #     - conda create --yes --name hicexplorer_dev --file requirements.txt -c defaults -c conda-forge -c bioconda
    #     - source activate hicexplorer_dev
    #     - python setup.py install
    #   before_script:
    #     - export GALAXY_SLOTS=4
    #     - mkdir file_buffer_dir
    #     - export HICEXPLORER_FILE_BUFFER_DIR="`pwd`/file_buffer_dir"
    #   script:
    #     - planemo test galaxy/wrapper --no_dependency_resolution
    
    - stage: planemo galaxy wrappers 
      env:
        - TESTGALAXY=1
      before_install: true
      install:
        - pip install flake8 planemo
        #- pip install flake8-import-order 
        # install miniconda
        - if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
            wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O miniconda.sh;
          else
            wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
          fi
        - export OLD_PATH=$PATH
        # we name the conda directory miniconda3, even if we are in conda2, because this is the directory in which Galaxy looks by default
        - bash miniconda.sh -b -p $HOME/miniconda3
        - export CONDA_PATH="$HOME/miniconda3/bin/"
        - export HIC_CONDA_ENV=__hicexplorer@_uv_
        - export GALAXY_RELEASE=release_17.05
        - export GALAXY_REPO=https://github.com/galaxyproject/galaxy
        - export HIC_TEST_DATA_DIR="`pwd`/hicexplorer/test/test_data/"
        - echo $HIC_TEST_DATA_DIR

        - export PATH=$CONDA_PATH:$PATH
        - hash -r
        - conda config --set always_yes yes --set changeps1 no
        - conda update -q conda
        - conda install conda-build
        - conda info -a

        # Replace dep1 dep2 ... with your dependencies
        - conda build ./scripts  -c conda-forge -c bioconda
        - conda create -y -n $HIC_CONDA_ENV python=$TRAVIS_PYTHON_VERSION
        - conda create -y -n __samtools@1.3.1 samtools=1.3.1 -c bioconda
        - source activate $HIC_CONDA_ENV
        - conda install --yes --file requirements.txt -c defaults -c conda-forge -c bioconda
        - conda install --yes --use-local hicexplorer -c defaults -c conda-forge -c bioconda
        # install HiCExplorer into the conda environment
        - pip install nose nose-progressive
        - hicBuildMatrix --version
      script:
        - source deactivate
        - export PATH=$OLD_PATH
        - export GALAXY_SLOTS=4
        - mkdir buffer_dir
        - export HICEXPLORER_FILE_BUFFER_DIR=`pwd`/buffer_dir"
        - if [[ "$TESTGALAXY" == "1" ]]; then planemo test --conda_dependency_resolution --no_conda_auto_init --conda_use_local --conda_ensure_channels conda-forge  --galaxy_branch "$GALAXY_RELEASE" --galaxy_source "$GALAXY_REPO" ./galaxy/wrapper/hicBuildMatrix.xml ; fi
        - if [[ "$TESTGALAXY" == "1" ]]; then planemo test --conda_dependency_resolution --no_conda_auto_init --conda_use_local --conda_ensure_channels conda-forge  --galaxy_branch "$GALAXY_RELEASE" --galaxy_source "$GALAXY_REPO" ./galaxy/wrapper/hicCorrectMatrix.xml ; fi
        - if [[ "$TESTGALAXY" == "1" ]]; then planemo test --conda_dependency_resolution --no_conda_auto_init --conda_use_local --conda_ensure_channels conda-forge  --galaxy_branch "$GALAXY_RELEASE" --galaxy_source "$GALAXY_REPO" ./galaxy/wrapper/hicCorrelate.xml ; fi
        - if [[ "$TESTGALAXY" == "1" ]]; then planemo test --conda_dependency_resolution --no_conda_auto_init --conda_use_local --conda_ensure_channels conda-forge  --galaxy_branch "$GALAXY_RELEASE" --galaxy_source "$GALAXY_REPO" ./galaxy/wrapper/hicFidEnrichedContacts.xml ; fi
        - if [[ "$TESTGALAXY" == "1" ]]; then planemo test --conda_dependency_resolution --no_conda_auto_init --conda_use_local --conda_ensure_channels conda-forge  --galaxy_branch "$GALAXY_RELEASE" --galaxy_source "$GALAXY_REPO" ./galaxy/wrapper/hicFindTADs.xml ; fi
        - if [[ "$TESTGALAXY" == "1" ]]; then planemo test --conda_dependency_resolution --no_conda_auto_init --conda_use_local --conda_ensure_channels conda-forge  --galaxy_branch "$GALAXY_RELEASE" --galaxy_source "$GALAXY_REPO" ./galaxy/wrapper/hicPlotDistVsCounts.xml ; fi
        - if [[ "$TESTGALAXY" == "1" ]]; then planemo test --conda_dependency_resolution --no_conda_auto_init --conda_use_local --conda_ensure_channels conda-forge  --galaxy_branch "$GALAXY_RELEASE" --galaxy_source "$GALAXY_REPO" ./galaxy/wrapper/hicPlotMatrix.xml ; fi
        - if [[ "$TESTGALAXY" == "1" ]]; then planemo test --conda_dependency_resolution --no_conda_auto_init --conda_use_local --conda_ensure_channels conda-forge  --galaxy_branch "$GALAXY_RELEASE" --galaxy_source "$GALAXY_REPO" ./galaxy/wrapper/hicPlotTADs.xml ; fi
        - if [[ "$TESTGALAXY" == "1" ]]; then planemo test --conda_dependency_resolution --no_conda_auto_init --conda_use_local --conda_ensure_channels conda-forge  --galaxy_branch "$GALAXY_RELEASE" --galaxy_source "$GALAXY_REPO" ./galaxy/wrapper/hicSumMatrices.xml ; fi
